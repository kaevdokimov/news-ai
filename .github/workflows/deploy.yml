name: Deploy to Production

on:
    push:
        branches: ["main"]
    workflow_dispatch:

jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Login to Docker Registry
              uses: docker/login-action@v2
              with:
                  registry: ${{ vars.DOCKER_REGISTRY }}
                  username: ${{ vars.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build and push
              uses: docker/build-push-action@v4
              with:
                  context: .
                  push: true
                  file: .docker/app/DockerfileProduction
                  tags: ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/news-ai:latest
                  cache-from: type=registry,ref=${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/news-ai:latest
                  cache-to: type=inline

            - name: Setup SSH
              run: |
                  mkdir -p ~/.ssh
                  echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ecdsa
                  chmod 600 ~/.ssh/id_ecdsa
                  echo "IdentityFile ~/.ssh/id_ecdsa" > ~/.ssh/config
                  echo "HostKeyAlgorithms +ssh-rsa" >> ~/.ssh/config
                  echo "PubkeyAcceptedKeyTypes +ssh-rsa" >> ~/.ssh/config
                  chmod 600 ~/.ssh/config
                  ssh-keyscan -p ${{ secrets.SSH_PORT }} -t ecdsa-sha2-nistp521 -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
                  chmod 600 ~/.ssh/known_hosts

            - name: Test SSH connection
              run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "echo 'SSH connection successful'"

            - name: Deploy to server
              env:
                  COMPOSE_PROJECT_NAME: ${{ vars.COMPOSE_PROJECT_NAME }}
                  APP_ENV: ${{ secrets.APP_ENV }}
                  APP_SECRET: ${{ secrets.APP_SECRET }}
                  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
                  RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_DEFAULT_PASS }}
                  DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
              run: |
                  scp -P ${{ secrets.SSH_PORT }} compose.yaml ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.DEPLOY_PATH }}/

                  ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.DEPLOY_PATH }} && \
                    echo 'APP_ENV=${{ secrets.APP_ENV }}' > .env.local && \
                    echo 'APP_SECRET=${{ secrets.APP_SECRET }}' >> .env.local && \
                    echo 'POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}' >> .env.local && \
                    echo 'RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}' >> .env.local && \
                    echo 'COMPOSE_PROJECT_NAME=${{ vars.COMPOSE_PROJECT_NAME }}' >> .env.local && \
                    docker compose pull && \
                    docker compose up -d && \
                    docker compose exec -T app php bin/console doctrine:migrations:migrate --no-interaction && \
                    docker compose exec -T app php bin/console cache:clear"
