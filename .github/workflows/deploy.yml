name: Deploy to Production
permissions:
    contents: read

on:
    push:
        branches: ["main"]
    workflow_dispatch:

jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Login to Docker Registry
              uses: docker/login-action@v2
              with:
                  registry: ${{ vars.DOCKER_REGISTRY }}
                  username: ${{ vars.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build and push
              uses: docker/build-push-action@v4
              with:
                  context: .
                  push: true
                  file: .docker/app/DockerfileProduction
                  tags: |
                      ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/news-ai:latest
                      ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/news-ai:${{ github.sha }}
                  cache-from: type=registry,ref=${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/news-ai:latest
                  cache-to: type=inline

            - name: Setup SSH
              run: |
                  mkdir -p ~/.ssh
                  echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_ecdsa
                  chmod 600 ~/.ssh/id_ecdsa
                  ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

            - name: Deploy to server
              env:
                  COMPOSE_PROJECT_NAME: ${{ vars.COMPOSE_PROJECT_NAME }}
                  APP_ENV: ${{ secrets.APP_ENV }}
                  APP_SECRET: ${{ secrets.APP_SECRET }}
                  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
                  RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_DEFAULT_PASS }}
                  RABBITMQ_SERVER_VERSION: ${{ vars.RABBITMQ_SERVER_VERSION }}
                  RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
                  RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
                  DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
              run: |
                  # Test connection
                  ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "echo 'SSH connection successful'"

                  # Create deployment directory
                  ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ secrets.DEPLOY_PATH }}"

                  # Copy project files (for Nginx bind mount and configs)
                  scp -r -P ${{ secrets.SSH_PORT }} . ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.DEPLOY_PATH }}/
                  # Use production compose file as compose.yaml
                  ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cp ${{ secrets.DEPLOY_PATH }}/compose-production.yaml ${{ secrets.DEPLOY_PATH }}/compose.yaml"

                  # Deploy application
                  ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.DEPLOY_PATH }} && \
                    cat > .env << EOF
                  APP_ENV=${{ secrets.APP_ENV }}
                  APP_SECRET=${{ secrets.APP_SECRET }}
                  POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
                  POSTGRES_USER=${{ secrets.POSTGRES_USER }}
                  POSTGRES_DB=${{ secrets.POSTGRES_DB }}
                  POSTGRES_VERSION=${{ vars.POSTGRES_VERSION }}
                  RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}
                  RABBITMQ_SERVER_VERSION=${{ vars.RABBITMQ_SERVER_VERSION }}
                  RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}
                  RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}
                  COMPOSE_PROJECT_NAME=${{ vars.COMPOSE_PROJECT_NAME }}
                  DOCKER_REGISTRY=${{ vars.DOCKER_REGISTRY }}
                  DOCKER_USERNAME=${{ vars.DOCKER_USERNAME }}
                  DOCKER_IMAGE=${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/news-ai:${{ github.sha }}
                  EOF

                  # Pull the pre-built image
                  echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ vars.DOCKER_USERNAME }} --password-stdin ${{ vars.DOCKER_REGISTRY }}
                  docker pull $DOCKER_IMAGE

                  # Update services
                  docker compose pull
                  docker compose up -d --wait"
